{"version":3,"sources":["logo.svg","common/ViewSource.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ViewSource","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","button","handleViewSource","bind","assertThisInitialized","source","regex","matches","URL","window","location","origin","exec","replace","value","console","log","change","e","preventDefault","document","getElementsByClassName","remove","setState","target","parent","parentElement","code","createElement","className","rows","getElementsByTagName","innerHTML","updateLinks","insertBefore","react_default","a","onClick","React","Component","App","src","logo","alt","href","rel","src_common_ViewSource","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qRC+DzBC,qBA3Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,OAAQ,eACtBR,EAAKS,iBAAmBT,EAAKS,iBAAiBC,KAAtBT,OAAAU,EAAA,EAAAV,CAAAD,IAHPA,sEAMZY,EAAQC,GAGb,IAFA,IACIC,EADAC,EAAMC,OAAOC,SAASC,OAEgB,QAAlCJ,EAAUD,EAAMM,KAAKP,KAAmB,CAC9C,IAAIQ,EAAUN,EAAQ,GAClBO,EAAQP,EAAQ,GAAKA,EAAQ,GACjCM,EAAUA,EAAQA,QAAQC,EAAON,EAAMM,GACvCC,QAAQC,IAAI,aAAcT,EAAQ,GAAI,OAAQM,GAC9CR,EAASA,EAAOQ,QAAQN,EAAQ,GAAIM,GAEtC,OAAOR,sCAGGA,GACV,IAAIC,EAAQ,qBACZD,EAAST,KAAKqB,OAAOZ,EAAQC,GAC7BA,EAAQ,oBACRD,EAAST,KAAKqB,OAAOZ,EAAQC,GAC7BA,EAAQ,oBAIR,OADAD,GAFAA,EAAST,KAAKqB,OAAOZ,EAAQC,IAEbO,QADJ,+BACiB,6CAIdK,GAEf,GADAA,EAAEC,iBACwB,gBAAtBvB,KAAKI,MAAMC,OAIb,OAHWmB,SAASC,uBAAuB,cAAc,GACtDC,cACH1B,KAAK2B,SAAS,CAACtB,OAAQ,gBAGzB,IAAMA,EAASiB,EAAEM,OACXC,EAASxB,EAAOyB,cAClBC,EAAOP,SAASQ,cAAc,YAC9BvB,EAAS,wBACbsB,EAAKE,UAAY,aACjBF,EAAKG,KAAO,GACZzB,GAAUe,SAASW,qBAAqB,QAAQ,GAAGC,UACnD3B,GAAU,UAEVA,GADAA,EAAST,KAAKqC,YAAY5B,IACVQ,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QACpDc,EAAKK,UAAY3B,EACjBoB,EAAOS,aAAaP,EAAM1B,GAC1BL,KAAK2B,SAAS,CAACtB,OAAQ,iDAIvB,OAAOkC,EAAAC,EAAAR,cAAA,UAAQS,QAASzC,KAAKM,kBAAmBN,KAAKI,MAAMC,eAxDtCqC,IAAMC,YC0BhBC,MAxBf,WACE,OACEL,EAAAC,EAAAR,cAAA,OAAKC,UAAU,OACbM,EAAAC,EAAAR,cAAA,UAAQC,UAAU,cAChBM,EAAAC,EAAAR,cAAA,OAAKa,IAAKC,IAAMb,UAAU,WAAWc,IAAI,SACzCR,EAAAC,EAAAR,cAAA,iBACOO,EAAAC,EAAAR,cAAA,0BADP,wBAGAO,EAAAC,EAAAR,cAAA,KACEC,UAAU,WACVe,KAAK,sBACLpB,OAAO,SACPqB,IAAI,uBAJN,eAQAV,EAAAC,EAAAR,cAAA,WACAO,EAAAC,EAAAR,cAAA,WACAO,EAAAC,EAAAR,cAACkB,EAAD,SCXYC,QACW,cAA7BtC,OAAOC,SAASsC,UAEe,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAR,cAACwB,EAAD,MAAShC,SAASiC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fa16ae3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './ViewSource.css';\n\nclass ViewSource extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {button: \"View Source\"};\n    this.handleViewSource = this.handleViewSource.bind(this);\n  }\n\n  change(source, regex) {\n    let URL = window.location.origin;\n    let matches;\n    while ((matches = regex.exec(source)) !== null) {\n      let replace = matches[0];\n      let value = matches[1] + matches[2];\n      replace = replace.replace(value, URL + value);\n      console.log(\"replacing:\", matches[0], \"=to=\", replace);\n      source = source.replace(matches[0], replace);\n    }\n    return source;\n  }\n\n  updateLinks(source) {\n    let regex = /href=\"(\\/)([^\"]+)\"/;\n    source = this.change(source, regex);\n    regex = /src=\"(\\/)([^\"]+)\"/;\n    source = this.change(source, regex);\n    regex = /f.p=\"(\\/)([^\"]+)\"/;\n    source = this.change(source, regex);\n    const btn = '<button>View Source</button>';\n    source = source.replace(btn, '');\n    return source;\n  }\n\n  handleViewSource(e) {\n    e.preventDefault();\n    if (this.state.button === \"Hide Source\") {\n      const el = document.getElementsByClassName(\"ViewSource\")[0];\n      el.remove();\n      this.setState({button: 'View Source'});\n      return;\n    }\n    const button = e.target;\n    const parent = button.parentElement;\n    let code = document.createElement('textarea');\n    let source = \"<!DOCTYPE html><html>\";\n    code.className = \"ViewSource\";\n    code.rows = 16;\n    source += document.getElementsByTagName('html')[0].innerHTML;\n    source += \"</html>\";\n    source = this.updateLinks(source);\n    source = source.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n    code.innerHTML = source;\n    parent.insertBefore(code, button);\n    this.setState({button: 'Hide Source'});\n  }\n\n  render() {\n    return <button onClick={this.handleViewSource}>{this.state.button}</button>;\n  }\n}\n\nexport default ViewSource;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ViewSource from './common/ViewSource';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <br/>\n        <br/>\n        <ViewSource/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}